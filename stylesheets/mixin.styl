adaptiveForSmall()
	@media screen and (max-width: 992px)
			block

sqrt(x)
	return math(x,'sqrt')
random(minarg = 0,maxarg)
	return floor(math(0, 'random')*(maxarg -+minarg + 1) + minarg)

// mixin for speed set
countDistance(x,y)
	x = x is a 'unit' ? x : convert(x)
	y = y is a 'unit' ? y : convert(y)
	return math(x**2 + y**2,'sqrt')

countTime(coords,speed)
	distanceX = coords.x[1] - coords.x[0]
	distanceY = coords.y[1] - coords.y[0]
	distance = countDistance(distanceX,distanceY)

	distance = distance is a 'unit' ? distance : convert(distance)
	speed = speed is a 'unit' ? speed : convert(speed)

	return unit(distance / speed,'s')



letters = A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z

changeArr(arr,index)
	for i in index..(length(arr)- 1)
		arr[i] = arr[i+1]
	pop(arr)
setAnimName(arr)
	index = random(0,(length(arr) - 1))
	arrEl = arr[index]
	changeArr(arr,index)
	return 'ANIM-'+arrEl
setKeyFrame(animName,coords)
	@keyframes animName
		from
			transform :translateX(coords.x[0]) translateY(coords.y[0])
		to
			transform :translateX(coords.x[1]) translateY(coords.y[1])
		// offsetX = (coords.x[1] - coords.x[0])/20
		// offsetY = coords.y[1] - coords.y[0]
		// newX = coords.x[0]
		// newY = coords.y[0]
		// for i in 0..100	
		// 	if(i is 0)
		// 		0%
		// 			transform :translateX(coords.x[0]) translateY(coords.y[0])
		// 	else if(i is 100)
		// 		100%
		// 			transform :translateX(coords.x[1]) translateY(coords.y[1])
		// 	else if(i%5 is 0)
		// 		newX = newX + offsetX
		// 		newY = newY + offsetY/5
		// 		offsetY = offsetY - offsetY/5

		// 		step = i+'%'
		// 		{step}
		// 			coords newX
		// 			transform :translateX(newX) translateY(newY)


fly(speed,coords,animArgs=null,animName= setAnimName(letters),setAnim=true,alreadeExistAnim= false)
	time = unit(speed) is 's' ? speed : countTime(coords,speed)

	if setAnim
		if alreadeExistAnim
			alreadeExistAnimArg = alreadeExistAnim.animArg
			setKeyFrame(alreadeExistAnim.keyFrame[0], alreadeExistAnim.keyFrame[1])
			setKeyFrame(animName,coords)
			animation animName time animArgs, alreadeExistAnimArg
		else	
			setKeyFrame(animName,coords)
			animation animName time animArgs 
			// alternate infinite
	else
		return  {
			animArg:animName time animArgs,
			keyFrame: animName coords
		}

freeWrapFly(speed,coords,animArgs,acceleration = 10)
	rocketCoordsPick = {
		x:coords[x][0] 0vw,
		y:coords[y][0] 0vh
	}
	rocketCoordsAway = {
		x:0vw coords[x][1],
		y:0vh coords[y][1]
	}
	rocketPickTime = countTime(rocketCoordsPick,speed)//determine the time of package delivery
	rocketAwayTime = countTime(rocketCoordsAway,speed)//determine the time of package delivery

	//set a package
	wrapDelay = rocketPickTime
	wrapSpeed = speed
	
	wrapCoords = {
		x: (coords[x][0] + 10vw) 0
		y: (coords[y][0] - 10vh) 0
		//x[0] and y[0] that's package's coords
	}
	wrapTime = countTime(wrapCoords,wrapSpeed)
	fly(wrapTime, wrapCoords,cubic-bezier(0.25, 0.46, 0.45, 0.94) wrapDelay both)
	
	//pick a package
	.rocket
		pickAnimData = fly(speed,rocketCoordsPick,animArgs,,false)
		fly(wrapSpeed,rocketCoordsAway,linear wrapDelay+wrapTime both,,true,pickAnimData)
	.component
		animation setOpacity .5s wrapDelay+wrapTime normal both, pinionRotate 4s wrapDelay+wrapTime linear reverse infinite
		@keyframes setOpacity
			from
				opacity .7
			to
				opacity 1
				margin-top 50px

		

			